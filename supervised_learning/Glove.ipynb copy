{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03472dfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pickle\n",
    "import panda as pd\n",
    "# !wget http://nlp.stanford.edu/data/glove.6B.zip\n",
    "# !unzip glove*.zip\n",
    "\n",
    "GLOVE_DIR = 'data/glove.6B.100d.txt'\n",
    "glove_dict = {}\n",
    "\n",
    "with open(GLOVE_DIR) as f:\n",
    "    for line in f:\n",
    "        word, *vector = line.split()\n",
    "        glove_dict[word]=np.array(vector).astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e74e5927",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_average_glove_vec(list_of_tokens):\n",
    "    avg_vec=[]\n",
    "    for token in list_of_tokens:\n",
    "        if token in glove_dict:\n",
    "            avg_vec.append(glove_dict[token])\n",
    "\n",
    "    if len(avg_vec)>0:\n",
    "        avg_vec = np.mean(avg_vec, axis=0)\n",
    "    else:\n",
    "        avg_vec = np.zeros(100)\n",
    "\n",
    "    return avg_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f88c54e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df= pd.read_pickle(\"data/features.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c7ed8d72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "403608"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokenized= df_features['normalized']\n",
    "len(tokenized)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "57ceb7e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "403608"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f95e3a61",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 403608/403608 [00:21<00:00, 18909.05it/s]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from tqdm import tqdm\n",
    "\n",
    "#df_original = pd.read_csv(\"data/WikiLarge_Train.csv\")\n",
    "df_vecs = []\n",
    "\n",
    "for ls in tqdm(tokenized):\n",
    "    avg_vec = get_average_glove_vec(ls)\n",
    "    df_vecs.append(avg_vec)\n",
    "\n",
    "df['glove_avg'] = df_vecs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "32dbf863",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df['glove_avg']\n",
    "y = df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a12f8b05",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "18d6e84b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train= np.vstack(X_train)\n",
    "X_test= np.vstack(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fd06a66",
   "metadata": {},
   "source": [
    "# Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "360cb72c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "\n",
    "rf = RandomForestClassifier(bootstrap= True,\n",
    " max_depth=50,\n",
    " max_features='sqrt',\n",
    " min_samples_leaf=4,\n",
    " min_samples_split=10,\n",
    " n_estimators=800)\n",
    "\n",
    "rf.fit(X_train, y_train)\n",
    "rf_predictions = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "08087208",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score is 0.6757017913332177\n",
      "The F-1 score is 0.6877624045801526\n"
     ]
    }
   ],
   "source": [
    "rf_acc = accuracy_score(y_test, rf_predictions)\n",
    "print(\"The accuracy score is {}\".format(rf_acc))\n",
    "\n",
    "rf_f1 = f1_score(y_test, rf_predictions)\n",
    "print(\"The F-1 score is {}\".format(rf_f1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e88eb406",
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(rf, open('data/glove.pkl', 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "cb983a12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfsAAAGECAYAAAAx/4nGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAABu4ElEQVR4nO3dd3gU1RrH8e+W9EogRXrvRYq00HtJ6F0FkSIGRBCQDipFRBQFUURRVEAQRIqFDiK9S+8ltBRCets2949cokhJINlMdvN+nsfnuju7M7897s27c+bMORpFURSEEEIIYbe0agcQQgghhHVJsRdCCCHsnBR7IYQQws5JsRdCCCHsnBR7IYQQws5JsRdCCCHsnF7tAMJ+lCtXjrJly6LVatFoNCQnJ+Pu7s4777xDlSpVAEhKSmL+/Pls374dR0dHAJo1a8brr7+Os7Nz+r5++eUXVqxYQUpKCkajkZo1azJmzBg8PT1V+WxPcvPmTVq2bEnZsmXTn0tKSiIgIICZM2dSpEiRbDnO4sWLuXjxIrNmzcqW/TVr1gwHB4cH2t3Pz4+vvvoqW/b/ODdu3GD27NnMnz//qd8bHh7Om2++yYoVKx7Yz82bNwkODubYsWPPnGv+/PlER0czZcqUZ95HZnzxxResXLmSevXq8f777z/1++Pj4xk6dCjff/+9FdIJeyXFXmSr7777Dh8fn/THixcvZvr06axcuRKTyUT//v15/vnnWbt2LS4uLiQnJ/PRRx8xYMAAvvvuO/R6PQsXLmTXrl0sWLCAAgUKYDQamTlzJkOGDGH58uUqfrrHc3Z2Zt26demPFUVh+vTpzJ07l48//ljFZE82Z86c9B9iOeX27dtcvXr1md7r7+/PihUrsrwfNa1evZo5c+ZQq1atZ3p/bGwsJ0+ezOZUwt5JN76wGpPJxJ07d/Dy8gJg48aNWCwWxo8fj4uLCwAuLi5MnDiRhIQEtmzZQlJSEl9++SUzZ86kQIECADg4OPD222/Tq1cvDAbDQ8eYOnUqwcHBdOnSheHDh5OYmAjAjh076NixI8HBwfTs2ZNz584BsHXrVjp16kSHDh3o3bs3J06cANLO7AYMGEBwcDCjR48G0s7COnfuTMeOHQkJCSE8PDxTnz01NZWIiIj0z3716lX69+9Pjx49aNq0Ka+//jqpqakAVKlShfnz59OrVy+aNWuW/oPGaDQydepUWrZsSa9evTh69Gj6/sPCwhgyZAjBwcEEBQXx9ddfA2m9DM2bN2fKlCl06dKFjh07sm3bNgYPHkyLFi0YMWIEFoslw/wXL17k5ZdfJjg4mA4dOrB27VoADhw4QIcOHejVqxfBwcEYDAa2b99O9+7d6dSpE7169Uo/u758+TK9evWiS5cudO7cmWXLlmE2m5k0aRKhoaEMGDDggWNu3bqVPn36pD9u3bo18+bNS/+8DRo04MaNG1SvXv2R+zGbzUyZMoXOnTvTokULNm3a9MjPtmbNGtq0aUOnTp2YNWsWFStWzPTnHzVqFN98803665YvX86IESMAHtsO/zZixAjCw8OZOHEiv//+O/Hx8YwbN44uXboQHBzMzJkzMZlMQNqPgvv7a9q0afr3Yvz48aSkpNCxY0fMZjPlypXj3r176ce4/zir/62EnVGEyCZly5ZVgoKClKCgICUwMFBp1qyZMm3aNOXu3buKoijKe++9p8yaNeuR733//feVadOmKSdPnlTq1q2b6WMeOnRIadOmjWKxWBRFUZTZs2crR44cUSIjI5WaNWsqp0+fVhRFUTZt2qQMGDBAuXTpklK/fn0lNDRUURRF2bt3rxIYGKjEx8cr8+bNU1q3bq0YjUZFURTll19+UUaMGJH+eMWKFcrAgQMfynDjxg2lfPnySocOHZSgoCClXr16Sps2bZSPP/5YSUhIUBRFUWbNmqWsXbtWURRFMRgMSlBQkLJx48b0dvvhhx8URVGUkydPKpUrV1ZSUlKUJUuWKH379lVSU1OVxMREpXPnzsrYsWMVRVGUF198Ufnmm28URVGUuLg4JTg4WPn111+VGzduKGXLllW2bt2qKIqiTJkyRWnatKkSHx+vpKSkKIGBgcqRI0cURVGUpk2bKq1atVI6dOiQ/s+ZM2cUo9GoNG/eXNm0aZOiKIoSFhamNGzYUDl69Kiyf/9+pXz58srNmzcVRVGUq1evKkFBQcq9e/cURVGUCxcuKIGBgUpiYqIyfvx45csvv1QURVEiIiKUESNGKGazWdm/f7/Svn37h9oxOTlZqVGjhhIbG6vcuHFDCQwMVHr27KkoiqIsXbpUmTp1qnLjxg3l+eefVxRFeWA/9z/3/TbdvHmz0rx584eOcfHiRaVevXrKnTt3FEVRlPnz5ytly5ZVFEVR5s2bp7z77rtP/Pz79u1TgoKC0vfXrVs3Zc+ePU9sh/9q2rSpcuLECUVRFGXcuHHK999/ryiKophMJmX06NHKokWLlISEBKVHjx7p+zt27Fj65/53G9z//kRFRT30ODv+Wwn7Id34Ilvd78Y/ffo0gwcPpk6dOuTPnz99+/2zlv8yGAzodDq0Wm2mzjzvK1u2LDqdju7du9OgQQNat25N1apV2bx5M2XKlEk/a2vVqhWtWrVi2bJl1K1bN/06er169fDx8eHUqVMAPP/88+j1af+32LFjBydPnqRr164AWCwWkpOTH5nj3934f/31F2PGjKFp06a4ubkBMGbMGPbs2cNXX33FtWvXiIiIICkpKf39zZs3B6BSpUoYDAaSkpLYt28fQUFBODo64ujoSHBwMOfPnycpKYmjR4+mn2F6eHjQpUsXdu3aRbVq1XBwcKBZs2YAFC1alOrVq+Pu7g6kXZOPjY1NP+6juvEvXbpEamoqrVq1AtK6zlu1asVff/1FnTp1eO655yhUqBAAe/bsISIigldeeSX9/RqNhtDQUFq2bMnYsWM5ceIE9erVY9KkSWi1j+9MdHZ2pn79+uzZs4fo6Gh69uzJypUriY+PZ/v27QwcOPCx74W0HqDWrVsDUL58eaKioh56ze7duwkMDCQgIACAl1566aGxA9euXXvs53/jjTdITU3l5MmTuLi4cO/ePerVq8fy5csf2w7ly5d/bOadO3dy8uRJVq9eDUBKSgoAbm5uLFy4kD///JNr165x7ty5B74vmWWt/1bC9kixF1ZRqVIlxo8fz7hx46hQoQKFCxemRo0afP3111gslgf+kFgsFg4dOsTrr79O6dKlMZlMXLt2jeLFi6e/JjU1lWHDhjF9+nT8/f3Tn/f09GTdunUcPXqU/fv3M2LECAYMGEBAQAAajSb9dYqicP78eSwWywPP3992/0eIq6vrA7kGDhyY3rVsMBgeKJSP07BhQ/r378+bb77Jb7/9hru7O2+99RZms5m2bdvSpEkT7ty5g/KvZSmcnJwA0rMpj1iyQqfTpef673aLxZL+GRwcHB74jA4ODhlm/jez2fxUbVSvXj0++eST9Ofu3LmDn58f5cuXZ9OmTezdu5d9+/axYMEC1qxZ88Rjt2jRgl27dhEXF8fAgQO5cuUKW7du5cKFC9SuXZs7d+489r3//pz/zX+fTqd7oO3ut2lmP79Go6Fbt26sW7cOBwcHunXrhkajeWI7PInFYuHTTz+lVKlSAMTFxaHRaAgLC6Nnz5706NGDmjVr0qZNG3bs2PHEfQEPXebK6n+r+z+KhO2Tn27CaoKCgqhatWr6iOPWrVvj4uLCzJkz089gUlJSmDZtGm5ubrRs2RJHR0cGDRrExIkTuXv3LpD2B2zmzJkkJyc/UOgh7ez7lVdeoXr16rzxxht06tSJU6dOUa1aNS5fvszFixcB2LZtG2PGjKFevXrs3r2bGzduALBv3z7u3LlDtWrVHsrfoEEDVq9eTUJCAgCffvopb7/9dqY++6uvvoqbm1v6Nefdu3czdOhQ2rVrB8Dff/+N2Wx+4j4aNmzI2rVrSU1NJTU1ld9//x0Ad3d3qlWrln5dNT4+nrVr11K/fv1MZctIyZIl0ev1bN68GUgbAb9p06ZH7r9evXrs2bOHy5cvA/Dnn3/SoUMHUlJSGDVqFL///jvt27dn6tSpuLu7Exoaik6nw2g0PvLYzZo1Y9++fZw9e5aqVasSGBjIp59+SqNGjR4qzE/az+M0aNCAffv2pY+9WLVq1VN//s6dO7N9+3Y2bdpEly5dMmyHjPIsWbIERVEwGAy8/vrrLF26lFOnTuHj40NISAgNGjRIL/Rmsxm9Xo/ZbE7/0eLj45M+YO/XX3997LGe5b+VsB9yZi+savLkyXTo0IG//vqLhg0b8s033/D555/TpUsXtFotZrOZZs2a8c0336SfmQ0ZMgQXF5f0gVepqanUrl2bzz///KH9N2rUiF27dhEUFISrqyteXl5MmzaNAgUKMGfOHMaOHYvZbMbd3Z25c+dSunRppk6dyrBhwzCbzTg7O7Nw4UI8PDwe2nf37t0JDw+nR48eaDQannvuuUzf9ubg4MDkyZMZOHAg3bp1Y+TIkQwdOhRXV1fc3d154YUXMvxj2qtXL0JDQwkKCsLb25tixYqlb5szZw7vvfcea9aswWAwpA9QvHXrVqbyZZT9888/Z/r06cyfPx+z2czQoUOpW7cuBw4ceOC1pUuX5r333uOtt95CURT0ej1ffPEFbm5uhISEMHHiRFauXIlOp6NFixa88MILxMbG4uTkRLdu3Vi1atUDZ9EeHh6UKlUKFxcXdDodDRs2ZOLEield6v899v39zJ07N1OfrUSJEowfP54BAwbg6OhIhQoV0geLZubzA/j6+lKxYkVMJlP6j88ntcOTTJw4kRkzZhAcHIzRaKR+/foMHDgQk8nE6tWradOmDRqNhtq1a+Pj48P169cpVqwYVatWpX379ixbtoxJkybx3nvv4enpSf369fH19X3ksZ7lv5WwHxrlUf2FQghhh27cuMG6desICQlBq9WyefNmvvrqq0ee4QthT+TMXgiRZwQEBBAREUFwcDA6nQ4PDw9mzpypdiwhrE7O7IUQQgg7JwP0hBBCCDsnxV4IIYSwc1LshRBCCDsnxV4IIYSwczY9Gj86OhGLRcYXWkv+/O5ERSWoHcPuSTtbn7Sx9UkbW5dWqyFfvifP2/AkNl3sLRZFir2VSfvmDGln65M2tj5p49xLuvGFEEIIOyfFXgghhLBzUuyFEEIIOyfFXgghhLBzUuyFEEIIOyfFXgghhLBzUuyFEEIIOyfFXgghhLBzUuyFEEIIO2fVYp+QkEBQUBA3b958aNvZs2fp0qULrVu3ZuLEiZhMJmtGEUIIIfIsqxX7v//+m969e3Pt2rVHbh8zZgxTpkxh06ZNKIrCTz/9ZK0oQgghRJ5mtbnxf/rpJ6ZOncrbb7/90LZbt26RkpLC888/D0CXLl2YN28effr0sVYcIYQQwroUBY0pAU1qNBpjPBpjAigWNCiAAorl///7r3///2MNlrTn729P/9+05zWOrpC/8zNHs1qxnzFjxmO3RURE4Ovrm/7Y19eX8PBwa0URQgghMk9R0Bhi0KbeRZMajTY5Ao05BU3KXbSGGLQpkWnF3BCDQ8R+FL0bGksqGkMsGosx2+MkG/XMPtKHqatyYbF/EovFgkajSX+sKMoDjzMrf3737IwlHsHX10PtCHmCtLP1SRtbX65vY7MREu9A+GFIvgdJYZASk/ZcUgQkR0JyFCQ8PM7siQwx//y73gWc84OTV9q/6xwBDWi0oNE8/O9P2qbRcvyqK70XFCdZ58/ULHx0VYp9QEAAkZGR6Y/v3r2Ln5/fU+8nKipBllS0Il9fDyIj49WOYfekna1P2tj6VGtjYwK6xJtoU++hTbqFNjkcjSEWbWoU2pS7aJNup52JJ0eiNSVkereK1gGNxYjFwROzVxk0phSMBWpicfFDcfLB4pQPxcEz7bHeA4tzfhRHL9A5Z+vHu+N0m0TN7yz8vG2W9qNKsS9UqBBOTk4cOXKEmjVrsm7dOho1aqRGFCGEELmVxYgu7gq6uIvoEq6lPU4IRRd/Ja2wJ91Ba8z8DwwFDYpzAczuxUAxY3yuKRZHr7SC7eyLxdkPi1Na0VYcPa33uTJw9WoM27ZdZeDA6tSqVZB9+/rj7Jy1cp2jxX7QoEEMHz6cKlWqMGfOHCZNmkRCQgKVKlWib9++ORlFCCFELqAxxKFNuIY++jQOEfvRJVxDY4jFIeooikaHRjE/8f2KRovi6I2idcDkWxeza0BasXbKj8XZF4uLf9o/TvlRnPKldZPnUoqisGzZKSZN2omjo5ZOncpRoIArjo66LO9boyiKzfaDSze+dUnXZ86QdrY+aWPry7CNLSZ08VfRRx3BKfRXdLEX0Bhi0CWHPXG/ZreimN2LoE2JxOxZFmNAA8weJTC7FsbiVgjFMd//r3HbtoiIREaN2sKmTVdo2LAI8+a1oVChf8ZAaLWaLI1TU6UbXwghhJ0yp6KLv4Y++gRO19ehMSWhTQ5DF38VjSnxkW8xeZXF7FEaU/5qWJx9MXuUxOxZGouLX7ZfA8+NDAYz7dr9SHh4ItOmNWHQoOpotdn7A0aKvRBCiGejWNAmXMch8hAc2ol32An0sWcfe/uZ2bUQpnyVMPnWQdG7YCjYErNnadBmvZvaFiUnG3F21uPoqGPq1EaUKeND+fIFrHIsKfZCCCEypijoYs6gjzqGQ9RxHG/8htYQ88DZusP//9fsVhRTvsqYfKpidi+K2bsiZvdiKM751cmeCx04cIthwzby9tv16N69IsHBZa16PCn2QgghHqJJvYf+3gkcwv5Cf+9vHCIPov33/eT/Z3H0xpS/Oo7lOhDtXBmzdwVVR7LndgaDmTlz9jFv3iEKF/akaFGvHDmuFHshhMjLjInoY86gTbqNLu4S+uhT6GPPo48+9dBLLc5+GP3qYsxfHbNnGUy+tbC4PAcaDb6+HphkEOQTnT8fRUjIH5w8GcGLL1Zm2rQmuLs75sixpdgLIUReoShok26nnbFH7MMhYi/6qGOPvMauaJ0weZfH5FsHo28tjH6BWNwK28XId7VcvhzNnTvxfPddB9q2LZ2jx5ZiL4QQdkqbFJZ2nf3eSZxC16KLu4LWEP3AaxSNFpN3RczuRbG4FcWUryIm70qY8lUGBzeVktuP27fjOXz4Dh06lKVdu9I0bFgEDw+nHM8hxV4IIeyF2YA+6ihOoetxvLkJfdzFh16iaHQY/Rtg8qmGMSAQo2/dtMlmRLZbs+YcY8duQ6OBpk2L4eHhpEqhByn2Qghhu4yJOIbvxuHOThwiD6KPPoXGnJy+WdG7YvKphsmrPKb8z2P0b5B2q5t0xVtVTEwKY8du45dfzlOz5nMsWNBGtSJ/nxR7IYSwFRZT2rX28D043tmB/u7hh663m7zKYgxoTGqxjhj96oHW4TE7E9aQmGikefOl3LmTwLhx9Rk+vDZ6vfpT9EqxF0KI3EqxpN3XHrYLx9s7cIjY80BxV9BgzF8d43NNMfrXx5i/ptzLrhKz2YJOp8XNzYGQkFrUrBnA888HqB0rnRR7IYTILRQFbdItHG9tRhdzFqdbm9HFX33gJSbPMhgDGmH0q4ehYDMUZ+vMuCYy78SJcIYN28i0aU1o3LgYAwY8r3akh0ixF0IINZmScIg4gMPdQziG/orDveMPbLY4+5FaqBXG5xphKNhSztxzEbPZwvz5h5g9ex8FCrig0+XesRBS7IUQIodpDDE4X1iCPvokzldXPbDNonfH5Fsbs3sxUot3xuhXH3Q5M/GKyLxr12IYOnQjhw7dpmPHssye3Zx8+VzUjvVYUuyFECIHaOMu43hrC87X1uAQuf+BbRa9O4ai7TEUak1qkfagz71FQ6TZvv0a589H8cUXbenSpTyaXH6HgxR7IYSwEn3UMZyur8P5/NdojXHpzysaPSbfFzC7FSa1eDcMhdvI7XA2IDIyiQsXoggMLEL//tVo374M/v62MfGQFHshhMhG2vgrOF9ejlPoBvQxZ9Oft+jdMfnVJaVEdwxFg1AcPFRMKZ7Wxo2XeeutzWg0Go4cGYizs95mCj1IsRdCiCzTRZ/B8c4OnK6txuHukQe2JZcdQGqR9hgDGoJO3YlVxNNLSDAwZcpOli49RaVKvnz+eVucnW2vdNpeYiGEyAW0SXdwuvYzzpeXP7BCnKJ3w1CoJalF2snoeRsXE5NCy5bLCA2NZfjwFxgzph5OTrZZNm0ztRBCqECbdAfn81/hGLYLh8iD6c8rWkfMnqVIqvQmqcU6gd5VvZAiyxRFQaPR4O3tTKdO5WjevDh16xZWO1aWSLEXQognsZjSzuAvLsExfE/604rWEUPBZqSUeglDwWbg4K5iSJFdLlyIYsSIzXz4YQsqVfJl4sQGakfKFlLshRDiv4yJON3ciOupj9HGX0VrSgDSRtEbirTDENCQ1FJ9ZJCdHbFYFBYvPsa0aX/h5ubI3btJakfKVlLshRAC0haZCduFy4VvcLy5EY3FkL7J7F6cpMojSS3eGcXRW72Mwiru3Iln+PDN/PnndVq2LMHHH7eyqZH2mSHFXgiRd5kNON7alLb+e+hv6WfwAMb81Ukt0YPUoh2wuBdRMaSwtu+/P8mhQ7eYM6cFL79cJddPkPMspNgLIfIcfeQhXM5/jeOtTWhT76U/b3YrSkqp3qSU7Y/FtaCKCYW1xcSkcPNmPJUr+zJyZB169KhIiRLeaseyGin2Qog8QZsUhtP1NThf/AF9zOn0501eZUkt1onU4t0we5dXMaHIKbt2hTJ8+Eb0eh379/fH0VFn14UepNgLIeyZxYjjrS3w52LyX9/yz9MOXqQW70xK6ZcxFaglU9XmEcnJRmbO3MOXXx6ldOl8LFjQFr1eq3asHCHFXghhf4wJOF9ejuuZz9AlXANA0Tpg9G9ASqnepBbtKIvN5DEREYl07bqa8+ejGDDgeSZPboirq4PasXKMFHshhN3QJoXhdGUFbn/PRGNOAcDkURJ91f5EFXpJZrPLwwoUcKVqVT/efbcxzZoVVztOjpNiL4SwbYqC482NOF1ZgVPoBjSKCUgbbJdY4x1Si3XC1z8fSmS8ujlFjrt2LYaJE3fw4YctKFjQgwUL2qodSTVS7IUQtsmcivPF73E5+zn6+MvpT6cWakVqie5p09bKwjN5kqIo/PjjaSZO3IFWq+HChXsULJi3J0CSYi+EsCn6qL9xPv81jre3oEu6DYDF2Y/kcgNIKdkbi0dxdQMKVUVGJjFq1BY2brxMYGBh5s9vQ+HCnmrHUp0UeyFE7mcx4nTlJ1zPLnhghTmTVzmSqoz6/1m8s3r5RK7x0Uf72L79Gu++25jXXquBVit3WoAUeyFELqZNuIHz5aU4X/gGXXI4kLaEbEqp3qQU747Jrw5o8satU+LxEhIM3LuXTNGiXowfH0jfvlWpWNFX7Vi5ihR7IUSuo4s+g8uFxThfWIxGsQD356d/i5RSfUDnqHJCkVscOnSboUP/wMPDiS1bXsTLyxkvL+nl+S8p9kKI3MFswCl0HS7nvsIhcj8AikZHapEgUkq/jKFwG5n8RqQzGs189NF+PvnkIIUKeTB9ehPpsn8CKfZCCHVZjDhf/A7Xk3P+GXCnd8dQNIjkCq9jyl9d5YAit7lzJ56+fdfz99/h9OpViRkzmuDhIXdePIkUeyGEOhQLLue+xPXYtPTV5kyeZUgpN5CUUr1lKVnxWD4+Lnh6OvHtt8G0b19G7Tg2QYq9ECJHaVKicL66EpdzX6KLvwqA2bUQyeWHkFxxGGh1KicUudGdO/HMnLmHGTOa4unpxOrVXe1yKVprkWIvhMgRDmF/4XpyDo53dqQ/Z3bxJ6V0X5KqjJa56sVjrVt3njFjtmIwmOnRoyINGxaVQv+UpNgLIaxHseB8aSlOV3/CMWxX2lNoMPrVI7VkL1JK9ZZZ7sRjxcamMG7cdn7++Rw1awawYEFbSpbMp3YsmyTFXgiR7bRJYTifX4Tz1dX/rDqndyOlVB8Sq02QBWlEpowfv4O1a8/z9tv1GDGiTp5ZjtYapNgLIbKPORWXM5/hevKj9EF3ZteCpBbvRlLlkVLkRYZSUkwkJhrJn9+FiRMbMGhQdapXD1A7ls2TYi+EyDpFweH2VjwOjEo/kzf61iGp4jAMhdvKJDgiU06ejGDo0D947jl3VqzoQqFCHhQqlLcXsMkuUuyFEM9OUXC8tQnXv2fhEHUUAJNXeRJrTsNQqJVMgiMyxWy2sGDBYT74YC8+Pi68804jGYCXzaTYCyGensWEy7mFuJxblH4mb3HyIblCCEmV3pRBdyLT7tyJZ/Dg3zlw4BbBwWX48MMW+PjInRnZTYq9ECLTNMZ4nK6txeX0J+jjLgJpy8smVXid5PKvgYO7ygmFrXFxcSA2NoUFC9rQrVsFOaO3Ein2QoiMGRNwPbcQl1OfoDXGAWB2eY7EWjPTlpeViXDEU7h7N4kFCw4zfnwg3t7O7NjxMjqdjLS3Jin2QojHUxScz3+F29/vo02NAsBYoCbJ5QaSWry7DLwTT23LliuMGLGZ2NhUWrcuSd26haXQ5wAp9kKIhykKjjf/wO34DPTRJ4G0Ip/4/BSMBZuqHE7YooQEA++8s4vvvz9BxYoFWLWqq6w5n4Ok2AshHqBJicL94Gicr/0MgMUpP4nVp5BS5hUZXS+e2dChf7Bx42WGDq3FuHH1cXKS8pOTpLWFEGnMqThf+Ba34zPQGmOxOHiQVHUcyeUGyrz14pkYjWYMBgtubg68/XZ9XnutBvXrF1E7Vp4kxV6IPE6TGo3LhcW4nF2INiUCAGP+6sQ3+BqzlywfKp7NpUv3CAn5gwoVCvDpp62pVEm67NVk1VERGzZsoF27drRq1Yply5Y9tP306dN07dqVDh068NprrxEXF2fNOEKIf1MUnK6swGddLdyOvYc2JQJTvsrENfiamLbbpdCLZ6IoCosXH6d586WEhsbSokUJtSMJrFjsw8PDmTt3LsuXL2ft2rWsXLmSS5cuPfCaGTNmMHz4cNavX0+JEiVYvHixteIIIf7F8fo6vH9tiOfuwWhTIjEWqEls05VEB+0htWQPuZVOPJPw8AR69VrD+PHbqV+/MH/+2Zfg4LJqxxJYsRt/79691K1bF29vbwBat27Nxo0bGTZsWPprLBYLiYmJACQnJ+Pl5WWtOEIIQBt3GY+DY3C8vRUARedCfJ2PSC3VBzRy+5PIGqPRwpkzd5k9uzn9+lWVCXJyEasV+4iICHx9/7lG4+fnx4kTJx54zbhx43j11VeZOXMmLi4u/PTTT9aKI0TeZjHjfPFb3A+NQ2MxYHHwIKVMf5Iqj0BxLqB2OmHDYmNTWLr0FFOnNqFwYU8OHRqAs7MMB8ttrPZfxGKxPPCrTlGUBx6npKQwceJElixZQtWqVfn2228ZO3YsixYtyvQx8ueXqTmtzddXVpzKCVZrZ8UCF1bDgZkQ+Xfac+V6oW3yEa7uBXG1zlFzJfkuZ78dO67Sr99abt+OJyioHLVqFVQ7kngMqxX7gIAADh8+nP44MjISPz+/9McXLlzAycmJqlWrAtCzZ08+/fTTpzpGVFQCFouSPYHFQ3x9PYiMjFc7ht2zVjs73NqK+5HJ6GNOA2B28Sfp+SmklHkZkoHkvPPfVr7L2SslxcT77+9h4cIjlCjhzW+/9aJWrYLSxlak1WqydIJrtYt09evXZ9++fdy7d4/k5GQ2b95Mo0aN0rcXK1aMsLAwrly5AsC2bduoUqWKteIIkWfoYi/gufNFvLd1QR9zGrOLP/G1P+Je57/TCr0QWfTKK+v54osj9OtXjW3bXqZGjefUjiQyYLUze39/f0aOHEnfvn0xGo1069aNqlWrMmjQIIYPH06VKlV4//33GTFiBIqikD9/fmbOnGmtOELYP4sR11NzcT3xIRpLKorWiaRKw0mqMgr0eanDXliD2WxBUUCv1zJsWC0GDapO8+ZyW52t0CiKYrP94NKNb13S9ZkzsqOdHcL34n5gJPqYswCkFOtM4gvvY3GVa6gg3+WsCg2N5Y03NlKvXmHGjQt85Gukja0rq934MmRSCBumSbmL+6FxOF9Nu5PF4lyAhNpzSC3eReVkwh4oisLKlWeYMGEHAC++KJdabZUUeyFskSkZ1zOf4XZ8GgCK1pHkcgNJqjYexVHmqxBZFxWVzOjRW/jtt0vUq1eI+fPbULSofLdslRR7IWyMPvIg3ls6oDElAWAsUIv4wIWYvWSmMpF9bt+OZ+fO60yd2oghQ2rImvM2Toq9EDZCkxKF++FxOF9ZCYDZvTiJ1caRWrKXzH4nskViopE//rhEt24VqFLFj6NHB5Ivn6x4aA+k2AuR2ykKTpeX4X5oLFpjPIpGR0rZ/iTUnC6j7EW2OXLkDiEhf3DtWgxVqvhRrlx+KfR2RIq9ELmY/u5h3A++jcPdtAmqTPmqENfgK8z5KqqcTNgLo9HMxx8f4JNPDvDcc+6sWdOdcuXyqx1LZDMp9kLkQtqEUNyOTMb5+i8AWBw8SKw+hZRyg0EWFxHZRFEUevX6hb/+CqVHj4rMnNkUT08ntWMJK5BiL0RuYjHjfHk57vuGoSFtDonUoh1JqP2B3DMvss396VU0Gg0vvVSZV16pKkvR2jkp9kLkEvq7R3A/8BYOUccAMBRsTmL1dzDlr6ZyMmFPwsISePPNTbRrV4Z+/arSuXN5tSOJHCDFXgi1xd/Efd8UXC5+C/y/y77mDFLK9JMue5GtNmy4wOjRW0lJMcmZfB4jxV4ItSgKzhe/hcPjcDGlAJBSshcJtWbKGvMiW8XFpTJ+/HZWrTpL9er+LFjQltKlfdSOJXKQFHshVKCLvYj7wTE43tkO/L/LvtoETL4vqJxM2KNjx8L45ZfzjB5dl5Ej6+DgoFM7kshhUuyFyEkWM27H3sPlzDw0ihkFDZpm84gt1Fe67EW2SkkxsW/fTZo2LU7jxsU4cOBVihTxVDuWUIlMuyVEDtEm3sJ7U1tcT89Fo5hJLt2Xe11OQfVhUuhFtjp9OpLWrZfTp88vhIbGAkihz+PkzF4IazOn4nLmM1xPf4rWEIPFyYf4egswFG2vdjJhZ8xmC198cYRZs/bi5eXEDz90lMVrBCDFXgjrMafifOkHXE/MRpccBoDBrz7xgZ9j8SipcjhhbywWhR491vDXX6G0a1eajz5qSf78Mt2tSCPFXggrcAjbjcfuQeiSbgFg8ipP4vMTMRTtIF32wiq0Wg0tW5age/cK9OxZEY18z8S/SLEXIjuZU3A/+DbOF79Dg4LJswxJlUeSWrI3aGUEtMheUVHJjBmzlZ49K9K6dSmGDKmpdiSRS0mxFyKb6CMP4bFvGPqYsygaLUnlBpNYayZoHdSOJuzQtm1XefPNzURHJ9OwYVG144hcToq9EFmkSYnC9dRcXM/MA8DsVpS4Bl9h8q+ncjJhjxITjbz77i6WLPmbChXys2JFFypX9lU7lsjlpNgL8awsRlxPzMb11CdoLKkAJJfuR2KtGSiOcpuTsI5Nmy7z3Xd/8/rrNRk/PhBnZ/kzLjIm3xIhnoE2/gqeuwfjEHkQAIN/IInVp2Lyq6tyMmGPjEYzZ87cpVo1fzp3LkfZsvnlbF48FSn2QjwNiwmnq6twPzgarTEei4MH8Q2/xlC4rdrJhJ26fDmaoUP/4Ny5KA4efBU/Pzcp9OKpSbEXIpMcQ3/F/cBb/9wzX7AF8fXmY3ErpHIyYY8URWHJkhO8886fODvrmTevNX5+bmrHEjZKir0QGdAm3sL9wEicbm4EwOxWhKQqo/+/BK3MOC2yn9Fopm/fdWzbdo0mTYoxb15rAgLc1Y4lbJgUeyGeQB91HK8tHdEaorHo3Umu8hZJlUbKPfPCqhwcdJQpk58WLUry6qvVZIIckWVS7IV4FHMK7ocn4HzhWzSKGUNAo7Que48SaicTdiouLpXJk3fyyivVqF49gPfea6x2JGFHpNgL8R+6eyfx2PM6DtEnAEgp9SLx9ebJ5DjCavbuvcEbb2zi9u14qlXzp3r1ALUjCTsjxV6I+yxmXM58hvvRycD/J8dp9C0m3xdUDibsVWqqiVmz9vL554cpXtybDRt6UqtWQbVjCTskxV4IQGOIwWP34PRBeCnFupBQb55MjiOsaunSUyxYcJi+favy7ruNcXOT3iNhHVLsRd5mMeFy9nPc/p6JxpSERe9OfINFGIoGqZ1M2CmLReH69VhKlPCmX7+qlC+fn8DAImrHEnZOir3Is/QR+/E48Bb66FMAmDxKEtf4e8w+VVVOJuzVjRtxDB++kYsXo9m79xU8PZ2k0IscIcVe5D0WI25HpuB6dkHaQ6f8JNSaTmqpF1UOJuyVoiisWnWW8eO3oygwc2ZTPDwc1Y4l8pAMZwRJTEzk3XffpV+/fsTExDBlyhQSExNzIpsQ2U4XdwnvjW3SC31ymf7c63xMCr2wmuRkIwMH/sqwYRupVMmXHTteplevSnLvvMhRGRb76dOn4+npSVRUFE5OTiQkJDBlypScyCZEtnK6tIx8GwJxuHsIs2shYlr8QkK9T1EcvdWOJuzY/VXpJk9uyC+/dKdYMS+VE4m8KMNif/bsWUaOHIler8fFxYU5c+Zw9uzZnMgmRLbQpEThvicEz72vozEnk1q4LdFBuzEWbK52NGGnkpKMTJ68k2vXYtBoNHz9dRBvvPECOp1MryzUkeE1e632wS+n2Wx+6DkhcivdvZN4b2qL1hgHQEKtmSRXGArShSqs5OjROwwdupHLl6MpVSofr7ziLV32QnUZFvsXXniBDz/8kJSUFP766y+WLVtG7dq1cyKbEFnifPF73A+ORmNOweRZhviGX2PKX13tWMJOmUwWPvnkAB99tJ+AAHd+/rkbDRsWVTuWEEAmuvFHjx6Nq6srHh4ezJ07l3LlyjFu3LicyCbEszEm4LHndTz2DUNjTiGleDdi2u+UQi+sasGCw8yevY9Oncqxc+fLUuhFrqJRFEV50gu2bt1KixYtHnhu7dq1dOrUyZq5MiUqKgGL5YnxRRb4+noQGRmvdoynoos5j+eOXujjL6NotCTWmklyhRC1Yz2RLbazrbFWGyuKwt27yfj6upKQYGDXrlDatSud7cexBfI9ti6tVkP+/M++zPFju/G3b9+OyWRi9uzZKIrC/d8EJpOJ+fPn54piL8S/OV5fi8e+4WgNMZjdihDb9EeZIEdYTXh4IiNHbub69Vi2bn0Rd3fHPFvoRe732GJ/9uxZ9u/fT1RUFN9///0/b9DreeWVV3IimxCZokkOx+PAKJxC1wNgCGhCXKNvUJwLqJxM2Ktff73I6NFbSEoyMnVqI5ycZH4ykbtl2I2/bNkyXnwxd044It341pXru+UUJe1s/sBItKn3AEio/g7JlUfa1Gj7XN/OdiC72jgx0cj48dtZseI01ar58/nnbSlTxicbEto++R5bl9W68e/r3r07W7ZsSZ81z2w2ExoaysiRI5/5oEJklSblLp67B+F4exsARt+6JLwwC1OBGionE/bM0VHLpUv3eOutOowaVRcHB53akYTIlAyL/ciRI7lx4waRkZFUrFiRv//+W269E6rS3z2C584X0SXdxuLoTXLFYSRVGQ0amf9BZL/UVBPz5x/i1Vefx8fHhfXre6LXy3dN2JYMi/3Zs2fZvHkz77zzDv3798disfDOO+/kQDQh/sOYgPvRd3C+8A0axYTRpxpxTZZhcZdbnIR1nDkTSUjIH5w5c5eAAHdeeqmKFHphkzL81vr5+aHX6ylevDgXLlygTJkyxMfLdRmRsxxub8NnXW1czi9Co5hILtOfmLZbpdALq7BYFD7//DCtWi0nIiKJpUs78dJLVdSOJcQzy/DM3tXVlQ0bNlC+fHl++uknSpYsSVJSUk5kEwLMqbjvH4nL5aVpD92LkfDCbAxF2qocTNiz2bP38vHHB2jbthQffdSSAgVc1Y4kRJZkeGY/ZcoUzp49S2BgIFqtlpdeeokBAwbkRDaRx2kMMXj/0SK90CdVfIN7HQ5KoRdWoSgKiYlGAPr3f55581qzZEkHKfTCLmR4692jXLp0idKl1Z88Qm69sy41b6XRxZzFY88QHKKOYXHKT2yT5Zj866mSxdrkliXry6iNo6OTGTNmGxERifzyS3dZne4ZyPfYurJ6691jv9E3b95k1KhRTJs2jeTkZAASExOZNWuWzJ4nrEex4Hp8Jvk21MMh6hhmtyJEt9tut4VeqG/79ms0avQ9f/xxiRYtSqgdRwireOw1+wkTJlC2bFkiIiL48ssvadasGcOHD8fNzY2vv/46JzOKPMLx5iZc/56JQ9QxAFJK9SGh5nSZCU9YRVKSkWnT/mLx4uOUK5ef5cs7U6WKn9qxhLCKxxb7sLAwvv/+e1JSUujSpQs//fQTr7zyCq+++ip6vUwNKbKRxYzbsfdwPT037aFzARJqzSK1ZA+Vgwl7ZrEobN9+jddeq8HEiQ1wdpa/a8J+Pfbb7eqaNijF2dmZ2NhYZs+eTYMGDZ5q5xs2bOCLL77AZDLRr1+/h6bdvXLlClOnTiU2NhZfX18+/vhjvLy8nuFjCFulSYnCc1d/HMN2ApBUIYSkauNQHL1VzSXsk8lk4bvv/qZPn8q4uzuyffvLuLk5qB1LCKvL1CgUHx+fpy704eHhzJ07l+XLl7N27VpWrlzJpUuX0rcrisLrr7/OoEGDWL9+PRUqVGDRokVPl17YNG1CKN5/tMAxbCcWx3zENltJ4guzpNALq7hyJZrg4BWMH7+DDRsuAkihF3nGY8/sNf9aSORZuu337t1L3bp18fb2BqB169Zs3LiRYcOGAXD69GlcXV1p1KgRAEOGDCEuLu6pjyNsk8PtHXj+1R9t6j3MHiWIabEOi0dxtWMJO6QoCl9+eZi33tqEg4OORYva06lTObVjCZGjHlvFz58/T40aaYuKpKSkpP+7oihoNBqOHj36xB1HRETg6+ub/tjPz48TJ06kPw4NDaVAgQJMmDCBs2fPUrJkSSZPnpylDyNsg9PVVXj+lTZXg9G3DnGNf8DiGqByKmGvpk37i88+O0yjRkWZP781zz3noXYkIXLcY4v9li1bsrRji8XyQO/A/R8J95lMJg4ePMjSpUupUqUKn3zyCbNmzWLWrFmZPkZW7jkUmePrm41/GM1GODAD9k9Le1y6Mw7tlpLfQSYtydZ2FkDa9Xm9XktISG3Kli3A0KG10WptZ+ljWyTf49zrscW+UKFCWdpxQEAAhw8fTn8cGRmJn98/t7X4+vpSrFgxqlRJm286KCiI4cOHP9UxZFId68rOSTI0hjg8d/TEMXwPAInPT05bqS7GDOTtiThkMpLsFR+fyqRJO0lONrFoUXsKFHDmjTfqSBtbmXyPrctqk+pkVf369dm3bx/37t0jOTmZzZs3p1+fB6hevTr37t3j3LlzAGzfvp1KlSpZK45QkTbuMl5bgnEM34PFwZPYxj+QVHUMaOQsS2Sv/ftv0rTpD6xceYYSJbzlZECI/7PajaX+/v6MHDmSvn37YjQa6datG1WrVmXQoEEMHz6cKlWqsGDBAiZNmkRycjIBAQHMnj3bWnGESvQRB/Da1g2tMRaza2FiW63H7Kn+VMvCvhgMZmbP3sv8+YcoWtSL9et7Urt2QbVjCZFrPNPc+LmFdONbV1a75RzCduG1vScaUyKphVoS3+ArFCefbExoH6T7M+vCwxNp3Pg72rcvw7vvNsbd3fGB7dLG1idtbF1W78aPjIxk8ODBtG7dmrt37zJgwAAiIiKe+YAiD1AsOJ9diNe27mmFvkh74pr8KIVeZCuLRWHNmnNYLAr+/m789dcrfPRRy4cKvRAiE8X+3XffpUWLFjg5OeHl5UX58uWZNGlSTmQTtkhR8PhrAB6H3kZjTia5dD/iGv8AOvkDLLLPzZtxdOu2miFDfue339ImyPH1lbs6hHicDIv9rVu36NGjB1qtFgcHB8aMGcOdO3dyIpuwNWYDHnuG4HztZxS9K3ENvyWh/nzQypzjInsoisLq1Wdp0uQHjh4NY+7clgQFlVE7lhC5XoZ/hTUaDRaLJf1xQkLCA4+FANAm3cZzR28coo6h6JyJa/w9hkKt1I4l7MzUqbtYuPAIL7xQkM8+a0OJEt5qRxLCJmRY7Fu1asXo0aOJj49nxYoVrFq1irZt2+ZENmEj9BH78drZB23KXSyO3sQ1+g5jwaZqxxJ25P6kXO3alcLHx5k33ngBnc5qdw4LYXcyNRp/7dq17Ny5E4vFQoMGDejevfsDs+GpRUbjW1eGo2sVCy5nP8ftyCQ0igVj/urENVmOxS1rEzLlNTKK+fHurznv5KTjnXcaP/N+pI2tT9rYurI6Gj/DM/sVK1YQFBREp06dnvkgwv5oksPx3DMEx9vbAEgq/xqJNaeDzknlZMJeHD8extChG7l48R6vvVbjoSm3hRCZl2E/2IEDB2jRogUTJkzg+PHjORBJ5HYOd3bis74Ojre3YXHyIbbJjyTW/lAKvcgWJpOFjz/eT7t2K0hIMLBqVVemTWsihV6ILMjwzH7u3LnExsby66+/Mn36dFJSUujevTv9+vXLiXwil3G8vg7PXf3RKCYM/g2Jb/gVFleZqUxkn9DQWD755AAdOpRh1qzmeHs7qx1JCJuXqREuXl5e9OzZk9deew1XV1e++uora+cSuY2i4HLyY7z+fBmNYiKleDdiW66XQi+yhaIo7NoVCkDJkvnYubMvCxe2l0IvRDbJ8Mz+zJkz/Pzzz2zcuJGKFSsycOBAmjVrlhPZRC6hTbqN19bO6GPOApBUYSiJtWaARkZDi6yLiEjkrbe2sHnzFX76qStNmhSjZMl8ascSwq5kWOxDQkLo2rUrq1atomBBOYvLa3T3TuK9qR1aYywWBy8S6s4ltUQ3tWMJO/H775cYNWoLiYkGZsxoQqNGRdWOJIRdyrDY79ixQwbG5EWKAvvew/vQHLTGeEzelYhtvlpuqxPZZsqUP1m48AhVqvjx+edtKVcuv9qRhLBbjy32vXv35scff6RGjRoPFPv7t78cPXo0RwIKFSgKrsenwck5aIHUQq2Ja/ID6OT6qcg+tWo9x4gRtRk9uh6Ojjq14whh1x47qU5ERAR+fn7cunXroW2KolC4cGGrh8uITKpjBaYkPPaE4Hx9DQAJL3xAcvkhIL07VpNXJiO5v+a8n58bgwfXyNFj55U2VpO0sXVZbYlbPz8/AKZOnUqhQoUe+Oett9565gOK3EuTEoX3pnY4X1+DonWEFgtJrvC6FHqRZefO3aVNm+XMm3eIK1ei1Y4jRJ7z2G784cOHc/XqVW7cuEFwcHD68yaTCUdHWa7U3mhS7+G9sRX6uItYnH2Jbf4z+co3BPmlLrLAYlH46qtjTJ/+Fx4ejnz/fUfatCmldiwh8pzHFvu3336bW7duMXnyZCZPnpz+vE6no3Tp0jkSTuQMXdwlPHf0Qh93EbN7cWJarsfiUVztWMIOnDoVwZQpO2nVqiQffdQSPz83tSMJkSdluBBObp6PWq7ZZ53j9fV47BmC1pSA2bUgMa1/x+JREpBrcDnFHtv51KlIKlf2BeDo0TtUrx6g6t8Re2zj3Eba2LqsthCOjMa3fw63d+D5V380FiOGgCbENVyM4uKrdixhw6Kjkxk3bjtr155n48Y+VK8eQI0az6kdS4g877HF/tNPPwXg119/zbEwIuc4hO3Gc+eLaCxGUkq9SHz9z2UgnsiSnTuv8+abm4iMTGL8+ECqVPFTO5IQ4v8yHI3v4+NDZGQkhQoVYteuXSxYsCDXduuLzNHFXsBzR2+0poS0xWzqfSaFXmTJe+/tokePn/HwcGTjxt6MGFEHvV6mUxYit8jw/43jx49n27ZtnDhxgq+//prnnnvugQF7wrboIw/hvbEVWmMshueaEttyHWhlQhORNf7+7gweXJ0tW16kalV/teMIIf4jw2J/48YNRo0axY4dO+jcuTNvvPEGMTExORBNZDeH8L14beuKNvUeBv8GxDX8BrQZzpgsxENMJgtz5x5gw4YLALz2Wg2mT2+Ki4uDysmEEI+SYbE3mUwA7N69m7p162I2m0lKSrJ6MJG9dPdO4LUlGK0hBkNAI2Jb/ILiLHORi6d39WoMHTqs5P3396QvSyuEyN0yPK2rXr067dq1Q6fTUaNGDfr160f9+vVzIpvIJvqI/Xht74HGYiS1UCviGn0HOie1YwkboygKS5eeZPLkP9HrtSxc2I4uXcqrHUsIkQkZFvvJkydz7Ngxypcvj1arZcCAATRq1Cgnsols4Hh9HZ67B6MxJ5NauA1xjb+XBW3EM9m79yajRm2lYcMizJvXhkKFPNSOJITIpAyLvU6nIyIigp9//hmj0UhgYCBarYyytQVOV1biuXsQAKlFOxLXcDHoZKpj8XRu3IijSBFPAgOLsGxZJ5o3L4FWK3dvCGFLMqzaixcv5ssvv6RcuXJUqlSJJUuW8Pnnn+dENpEFDre2pBf6pMqj/n9GL4VeZF5CgoGRIzcTGPgtly7dA6Bly5JS6IWwQRme2a9du5Yff/wRd/e0afq6detGjx49CAkJsXo48Wz0Efvx2tEbgJRSfUisMVXlRMLWHDhwi2HDNnLjRhxvvPECRYt6qR1JCJEFmbrv6n6hB/Dw8ECvl9u1cit95CG8t3ZCYzGQUqpP2sx4QmSSoih88MFePvnkIIULe7J2bQ/q1i2kdiwhRBZl2I1fqFAhvvvuO4xGI0ajkSVLllCwYMGcyCaeksPt7Xht7YTGlERqodbE150HGhlfITJPo9GQnGyid+9K7Nz5shR6IexEhqvehYeHM3r06PSFb6pVq8acOXNyRcGXVe/+ob97FO9NbdCYU0gt3C5brtHLKlY5Q+12tlgUvv76GFWr+lO3biEsFsXursur3cZ5gbSxdVlt1bv7/P39+eGHH0hOTsZiseDmJutR5zbahOt47uyDxpxCSonuxAd+KTPjiUy5fTueN97YxF9/hfLKK9WoW7eQ3RV6IcQTuvGvXbtG165dqVGjBiEhISQlJUmhz4V00WfI93szdEm3MeavnraojRR6kQlr1pyjcePvOXLkDh991IIPPmimdiQhhJU8tti/9957dO7cmVWrVlGsWDFmz56dk7lEJujunUhb1CYlElO+KsQ2+wn0LmrHEjZg06bLDBnyO6VL+7B9+0u8/HJVWc1SCDv22FPAu3fv8tJLLwEwevRoOnbsmGOhRMa0cZfx3toZrTEOU74qxLTZiOIgM5qJJ4uOTiZfPhdatCjBvHmt6datgixFK0Qe8Nj/l//79jqdTie32+UiuuhTeG9qizYlEoN/Q6LbbZdCL54oOdnIpEk7qF9/CeHhCeh0Wnr1qiSFXog84rEV/L+D9KWLL3dwuvITHnuHorGkYvStS2yzlbKojXiiEyfCCQn5gwsX7jFw4PN4eMj3RYi85rHFPiwsjOnTpz/28aRJk6ybTDzE4dZWPHYPQoOSNtd9g0VyjV48lqIozJt3iA8+2EuBAi6sXNmFpk2Lqx1LCKGCxxb7F1988YmPRc7SxZzH869X0aCQXG4QCbXngPS2iAycPh1J+/almT27OfnyyQ9DIfKqDCfVyc3yyqQ62qQ7eP/eDF3SrbT16JuuyJHb62SSjJyRne2sKArLl5+idu1ClCnjg8FgxsFBm+cvw8l32fqkja0rq5PqyOicXE5jjMdzRy90SbcweZUjvuFiuY9ePFJkZBL9+q1n5MgtfPvtcQAcHXV5vtALITK5EI5QhzYhFK/tPdHHnMbiXIDY5j+jOMrqY+JhmzZdZuTILcTHp/Lee40ZPLiG2pGEELmIFPvcypiA544+6GNOY3YrQmzzNVjci6qdSuRCa9eeZ/Dg36hUyZeff+5GhQoF1I4khMhlMuzGt1gsfP3114wdO5aEhAS+/PJLzGZzTmTLszSGWLw3tcMh+gRm14JEt9uB2buc2rFELpOcbASgdeuSTJ3aiI0be0uhF0I8UobFfvbs2Vy4cIETJ04A8Ndff/H+++9bPVieZU7B+4+WONw7/v+u+zUoLn5qpxK5iMFgZubM3TRt+gMJCQZcXBwYOrQWTk7SUSeEeLQMi/2+ffuYNWsWTk5OuLu7880337Bnz56cyJb3KApeO3qjjz2HonUipsVazPkqqp1K5CLnz0fRtu2PfPLJQerUkbXmhRCZk+GpgF6vR6v95zeBo6OjTJ1rJa5/z8Dx9jYsTvmJbb4as09VtSOJXMJiUVi8+BjTpv2Fm5sj334bTPv2ZdSOJYSwERlW7bJly7Js2TLMZjNXrlxhyZIllC9fPiey5Skup+fhdiJtZcGEOh9hKlBT5UQiN1EUhQ0bLtKwYVE+/rgV/v6y3LQQIvMy7MafOHEip0+fJioqit69e5OYmMiECRNyIlue4XriA9yPpE0/HF/nY1KLd1E5kcgt1q+/QHh4IjqdlmXLOrF0aScp9EKIp5bhmb27uzszZ87MiSx5kvPFH3A7PgOA+DpzSSk3QOVEIjeIiUlh3LjtrFlzjmHDajFlSiNZwEYI8cwyLPb/Xvzm32QhnKxzvL4ej31DAUis+rYUegHArl2hDB++kYiIJMaNq8/w4bXVjiSEsHEZduN7e3un/+Pm5sbBgwczvfMNGzbQrl07WrVqxbJlyx77up07d9KsWbNM79ce6GLO47E3BICkCiEkVZNLIwJ++ukM3bqtxtXVgd9/78Vbb9WVNeeFEFmW4Zn9sGHDHng8aNAgXn/99Qx3HB4ezty5c1mzZg2Ojo706tWLOnXqULp06Qded/fuXT744IOnjG3bNIZYvLZ3R2uMI7VQSxJrvS8r2OVxZrMFnU5LixYlGD78Bd56qy6urg5qxxJC2ImnPmVwd3cnIiIiw9ft3buXunXr4u3tjaurK61bt2bjxo0PvW7SpEkP/aCwa2YDHn8NQJdwDZNXeeIbfiuFPg8zmy28//5fdOz4E0ajGR8fFyZNaiiFXgiRrTI8s582bVr6qlmKonD69GlKliyZ4Y4jIiLw9fVNf+zn55c+C99933//PRUrVqRatWpPm9smaVLv4bmjD44Re7E4eBDXZCmKo6fasYRKrl2LYdiwjRw8eJvg4DKkpppxcNCpHUsIYYcyLPb58uV74HGHDh3o0KFDhju2WCwPLK2pKMoDjy9cuMDmzZtZsmQJYWFhT5M5XVbW9s1xZiN81xKiL4KzD9pOG/AplPvvpff19VA7gt1RFIVvvz3Om29uRKvV8MMPnXnxxSqyFK2VyXfZ+qSNc68Mi31oaCizZ89+6h0HBARw+PDh9MeRkZH4+f0zx/vGjRuJjIyka9euGI1GIiIi6NOnD8uXL8/0MaKiErBYlKfOpgbPbd1wir6IRe9OdLs/sTgWg8h4tWM9ka+vB5G5PKMtSkkxMWvWbqpV82P+/DZUr15I2tnK5LtsfdLG1qXVarJ0gpvhNftz586hKE9fUOvXr8++ffu4d+8eycnJbN68mUaNGqVvHz58OJs2bWLdunUsWrQIPz+/pyr0tsTx+jqcbm0GILblL1jci6mcSKhh+/ZrJCQYcHbWs2ZNN37+uTuFC8tlHCGE9WV4Zu/r60v79u2pVq0abm7/zNyV0X32/v7+jBw5kr59+2I0GunWrRtVq1Zl0KBBDB8+nCpVqmQ9vQ3Qxl3GY99wABKrjMHkW0flRCKnJSQYmDr1T3744SRjx9Zn1Ki6+Pvb0CUoIYTN0yiPOW03GAw4Ojry2WefPfKNuWEEfW7vxtcm3cZ7Yxt0CdcwBDQhtsUvoLWdAVjSLZd1hw7dZujQP7h+PZahQ2sxdmz9h5ailXa2Pmlj65M2tq6sduM/9sy+Z8+e/PLLL7miqNsibeJNvDe2Rpd4A5NHSeIaLrapQi+y7scfTzFy5BYKFfJg7doe1KtXWO1IQog86rHF/lmu04s0mpQovLZ1Tyv03hWJbbEWxcU34zcKu3D/zpN69Qrz0ktVmDq1ocxrL4RQ1WOLfWpqKmfOnHls0a9UqZLVQtk0ixnPnS+ijzmN2bUgMa1/R3HyUTuVyAEWS9otdQcO3ObLL9tRvLg3c+a0UDuWEEI8vtjfuHGDN95445HFXqPRsG3bNqsGs1VuR6emTZqjdye21a9S6POIO3fiefPNzezceZ0WLUqQlGTCzU1mwRNC5A6PLfalS5dm7dq1ORjF9jmG/obrmXkAxDf6FrNn6QzeIezBunXnGTNmKwaDmQ8/bEHfvjJBjhAid8nw1juROfqo43juHghAUsVhGAq3VjmRyAkJCQYmTNhByZL5WLCgLaVK5cv4TUIIkcMeW+xr1aqVkzlsmjbxJp7be6IxJZJauC2JNaerHUlY2eHDt3n++QDc3R1Zt64HxYt7y1K0Qohc67F/nTKaNEf8n8WM5/Ze6JLvYPR5Pu0WO4380bdXKSkmJk/eSbt2K/j22+MAlC7tI4VeCJGrSTd+Frmc/xKH6BNYHPMR22INOMjMaPbq5MkIhg79g3Pnonj11Wq8+GLemAVSCGH7pNhngSY5HPdD4wBIqDsXxbmAyomEtSxffooxY7bi4+PCihWdadashNqRhBAi06TYPyNN6j28t3QCwFigFqnFu6gbSFhVhQoFCAoqw/vvN8PHx0XtOEII8VTkQuOzUCx47nw5beIct6LENVmmdiKRzRRF4ccfT/Huu7sAqF49gC+/bC+FXghhk+TM/hm4nFmAY/hfWPTuxLT6FYvrc2pHEtno7t0kRo3awh9/XCYwsDAGgxlHR1nXQAhhu6TYPyVdzHncjr0LQEK9+Vg8iqsbSGSrLVuuMGLEZmJjU3nnnUYMGVITrVYmyBFC2DYp9k/DnILH7oFoLAZSSvYktURXtROJbBQVlczgwb9RtKgXq1Z1pWJFWbxICGEfpNg/BbcjU3C49zdm18IkyMQ5duPixXuULp2P/PldWLWqK1Wq+D205rwQQtgyGaCXSQ53duJ6biGKRkt8/c9QXPzVjiSyyGg088EHe2nU6Dt+/vkcALVqFZRCL4SwO/JXLRM0KVF4be8JQHKFEIwFm6mcSGTVxYv3GDr0D44fD6dnz4q0bl1S7UhCCGE1Uuwzwf3wODTmZEz5KpNYfaracUQWrVhxmrFjt+Hiomfx4iCCg8uqHUkIIaxKin0GHK/9gvOVlSgaPXGBX4LOSe1IIot8fFwIDCzC3Lkt8feX6Y2FEPZPiv0TaOOv4blnCABJlUdg9pG50G3V+vUXCA9PYNCgGrRqVZKWLUvImvNCiDxDBug9jqLguXsgGnMyKcW7kPT8ZLUTiWcQG5tCSMgfDBz4K+vWXcBstgBIoRdC5ClyZv8YbsfexSHyIBZnPxJemA1SHGzOnj03GDZsI2FhCYwZU48RI2qj08nvWyFE3iPF/hGcLi/H9dTHACTUno3i4qdyIvG0bt+Op0ePnylSxJPffutFjRoypbEQIu+SYv9f5lTc/p4FQEKt92U1OxsTHp6Av787BQt6sGRJB+rXL4Kbm4PasYQQQlXSp/kfHntD0CVcw+xenORyA9WOIzLJbLbw2WeHqFVrMTt2XAOgZcuSUuiFEAI5s3+A87mvcL66Sm6zszGhobG88cZG9u27Rfv2palaVWY3FEKIf5Ni/3+a5HDcD08AIKnKaEz+9VROJDJj9eqzvP32NgDmz29Djx4VZKS9EEL8hxR7AIsRzz/7obGkYghoTNLzE9ROJDIpMdFIlSq+zJ/fhqJFvdSOI4QQuZIUe8Dt+EwcI/ZiccxHfOAXascRGdi69QqJiUY6dixH375VeOmlynJLnRBCPEGe/wupTbiBy+m5AMTXm4/FrbDKicTjJCYaGTNmK336rOWrr46hKAoajUYKvRBCZCDPn9m7H5mIRrFgCGiCoWiw2nHEYxw5coehQ//g6tUYQkJqMm5coFybF0KITMrTxd4hbDdO19cCEF/vU5klL5e6fDmaoKAVPPecO2vWdCcwsIjakYQQwqbk3WKvKLgdGgdASqkXsXiUUDmQ+K/4+FQ8PJwoVSofH33UkqCgMnh6yu2QQgjxtPLsxU7nSz/gEH0Ci2M+El74QO044l8UReGbb45TvfrXnDwZAUCfPpWl0AshxDPKk2f2mtR7uO8fDkBijXdRHD1VTiTuCwtL4M03N7Fjx3WaNi2Gr6+r2pGEEMLm5cli73b0XTSKBaPP86SU6ad2HPF/GzZcYPToraSkmJg1qxn9+1eTQXhCCJEN8lyx1yaF4XLxWwAS6n4ig/JykdOnIyle3IsFC9pSurSP2nGEEMJu5Lli73x+EQBGv3qYCtRQOY3Ys+cGGg3Ur1+EUaPqMmpUXRwcdGrHEkIIu5KnBuhpUu/hcu4rAJLLDVI5Td6WkmJi6tQ/6dJlFXPm7AfAwUEnhV4IIawgT53Zu5z5DK0xFoN/IKnFu6odJ886fTqSkJA/OHv2Lq+8Uo2pUxupHUkIIexanin2GkMMrmc+AyCp2ni5Vq+SkycjaNv2R7y8nFi+vBMtWpRUO5IQQti9PFPs3Y5MRWNOwZivKkb/BmrHyXMMBjOOjjoqV/Zl9Oi6vPxyVfLnd1E7lhBC5Al54pq9PuoYzpe+Q0FDQp05oMkTHztXUBSFlSvPUKfON9y8GYdGo2HEiDpS6IUQIgfliTN71xMfolEsJJcbiMmvrtpx8oyoqGTGjNnKr79epG7dQmrHEUKIPMvui7024TpON35FQUNSpZFqx8kztm27yptvbiY6OpnJkxsSElJTlqIVQgiV2H2xdz09H0i7r97iLqul5ZR16y6QP78zK1Z0oXJlX7XjCCFEnmbfxd6UhNPVVQAk1nxX5TD27+jROzg766lY0ZeZM5ui12txdrbvr5gQQtgCu+5XdT37OVpDNCbvSpgK1FY7jt0yGs3Mnr2X9u1XMH36bgDc3R2l0AshRC5ht3+NNYZYXE/OASCx+hS5r95KLl26x9Chf3DsWDjdu1dg5symakcSQgjxH3Zb7F1PfIjGlITRtzaGwq3VjmOXjhy5Q5cuq3B21vP110F06FBW7UhCCCEewS6LvSY5Apf/L3iTUHO63FefzRRFQaPRUKWKHy+9VIU33niBgAB3tWMJIYR4DLusgu5HJqExp2B4rpncV5/NNmy4QPPmS4mJScHRUceMGU2l0AshRC5n1WK/YcMG2rVrR6tWrVi2bNlD27du3UrHjh3p0KEDISEhxMbGZvmY+ruHcb6yAoDE6pOyvD+RJi4ulWHDNjJgwK/o9Vri4lLVjiSEECKTrFbsw8PDmTt3LsuXL2ft2rWsXLmSS5cupW9PSEjgnXfeYdGiRaxfv55y5coxf/78LB/X5cwCAJJL98VUoFaW9ydg794bNG36Az//fJZRo+ry22+9KFrUS+1YQgghMslqxX7v3r3UrVsXb29vXF1dad26NRs3bkzfbjQamTp1Kv7+/gCUK1eOO3fuZOmYGkMMztd+BiC50ptZ2pf4x7x5h9DrtWzY0JOxY+vLmvNCCGFjrDZALyIiAl/ff2ZO8/Pz48SJE+mP8+XLR8uWLQFISUlh0aJFvPzyy1k6pseeEAAMAY0xe5XJ0r7yujNnIilVSsHJScNnn7XB2VmPu7uj2rGEEEI8A6sVe4vFguZf97bfH8H9X/Hx8QwdOpTy5cvTuXPnpzpG/vz/GhhmSoXIvQA4vvAGvr4ezxY8j7NYFObO3ceECdvp3Lk8K1Z0k7bMAdLG1idtbH3SxrmX1Yp9QEAAhw8fTn8cGRmJn5/fA6+JiIhgwIAB1K1blwkTJjz1MaKiErBYFACczy/GI+UeJu+KRHu3hMj4rH2APOjGjTiGD9/Inj03adeuNPPntyVS2tHqfH09pJ2tTNrY+qSNrUur1Tx4gvu078/GLA+oX78++/bt4969eyQnJ7N582YaNWqUvt1sNjNkyBDatm3LxIkTH3nW/zTcjqXNfZ9S+mWZLe8Z7N9/iyZNvufvvyOYN681334bjK+vm9qxhBBCZAOrndn7+/szcuRI+vbti9FopFu3blStWpVBgwYxfPhwwsLCOHPmDGazmU2bNgFQuXJlZsyY8dTH0ibeRGuIASClVJ/s/Bh5RsWKBWjZsgTjxzegWDEZaS+EEPZEoyiKonaIZ3W/G99j9yCcr6wktXAb4pr9pHYsm7F9+1UWLTrGd991wMnp4d990i2XM6SdrU/a2Pqkja0r13bj5yR91HEAUot2VDeIjUhKMjJ27DZ69fqF27fjiYxMUjuSEEIIK7L5ufF1cZfQx54HILVEV5XT5H5Hj95h6NCNXL4czZAhNZkwIVCWohVCCDtn83/lXU6nzbqXUqwz6JxVTpO7KYrCuHHbSUkx8fPP3WjYsKjakYQQQuQAmy/2GnNaF7TFo6TKSXKvK1eiyZ/fBS8vZxYtak++fM54eckPIyGEyCts/pq9Q9huAFKLtFM5Se6jKArffXeCZs1+YPr0tHYqXtxbCr0QQuQxNn1mr02OQJd0C0XvhqlATbXj5Crh4YmMHLmZrVuv0rhxMd56q47akYQQQqjEpou9Lvo0AMb81UFj850U2Wbfvpv077+epCQj77/flP79n0erlYmGhBAir7LpYq+PT1sy15SvsspJcpdixbyoXNmP999vRpkyPmrHEUIIoTKbPh3WxV4AwOxdUeUk6tu37yYjRmzCYlEoWNCD1au7SaEXQggB2PiZvTbhOgBmr7IqJ1FPaqqJDz7Yy4IFhylWzIuIiEQCAp59liUhhBD2x6aLvUPMGRSNDlO+SmpHUcWZM5GEhPzBmTN3efnlKrz7bmNZc14IIcRDbLrYA6B1QHHMewu3mM0W+vffQHy8gaVLO9GqlcwzIIQQ4tFsvtinFm6rdoQcdetWPL6+rjg66vjqq/YULOhBgQKuascSQgiRi9n0AD0A9Hmj0CmKwqpVZ2jU6Ds+/ng/AFWr+kuhF0IIkSGbP7M3+r6gdgSru3cvmbff3sb69ReoXbsgvXrlzTEKQgghno3NF3uLs5/aEaxq376bDB78G/fuJTNpUgOGDq2FTmf7HTJCCCFyjs0Xe8XRU+0IVuXp6YSfnxvLl3emShX7/mEjhBDCOmz+FNHsXkztCNnu+PEwPvhgLwCVKvmydeuLUuiFEEI8M5sv9opjPrUjZBuTycJHH+2nXbsV/PjjKe7dSwZAo5F57YUQQjw72+/Gd/BQO0K2uHIlmqFD/+DIkTC6di3PrFnNZClaIYQQ2cKmi73ZxR/s4Kw3NdVE586rSEoysmhRezp1Kqd2JCGEEHbEpou9orftOeCjopLx8XHGyUnPvHmtKVvWh+ees4+eCiGEELmHTV+zV3ROakd4Zr/9dpHAwG/55pu/AWjcuJgUeiGEEFZh48XeRe0ITy0+PpU339xE//4bKFzYkwYNiqgdSQghhJ2z6W589LZV7A8evE1IyO/cvBnPyJF1GDWqLo6OOrVjCSGEsHM2XewVrW114ycnG9HptKxf35PatQuqHUcIIUQeYdPd+Ogc1E6QobNn7/LddyeAtOvyu3f3k0IvhBAiR9l0sdcm3lE7wmNZLAoLFx6hVatlzJmzj4QEAwAODtJtL4QQImfZdDe+OV9FtSM80s2bcQwfvondu2/Qpk0pPvqoJe7ujmrHEkIIkUfZdLHPjbfeJSYaadVqGcnJJj75pBW9e1eS6W6FEEKoyraLvd5V7QjpkpKMuLo64ObmwPTpTalRI4Dixb3VjiWEEELY9jV7Re+mdgQAduy4Rt263/D775cA6NKlvBR6IYQQuYZtF3uVJ9VJSjIyfvx2evZcg6enE4ULywx4Qgghch+b7sZHq96td3//HU5IyB9cvHiPwYOrM3FiA1xccv+tgEKIzDGbTURHR2IyGdSOYhMiIrRYLBa1Y9gFvd6RfPl80emyr0TbdLFXtOp1TJw7F0VCgoFVq7rSuHEx1XIIIawjOjoSZ2dX3NwCZJBtJuj1WkwmKfZZpSgKiYlxREdHUqDAc9m2X5su9mhy9kz6ypVozp2Lol270vToUYH27UvLLXVC2CmTySCFXuQ4jUaDm5snCQkx2bpfmy72iiZnJqhRFIWlS08yefKfeHk50bx5cZyc9FLohbBzUuiFGqzxvbPpYo/W+vEjIhJ5660tbN58hYYNizJ/fmucnGy72YQQQuQttl21tNY9s4+OTqZJkx+Ij09l+vQmDBxYHa1WfukLIXLWnTu36d27C8WLlwRAUSwkJibStm0QAwa8BkBSUhJffDGfgwf34ezsgpubG6++OphatWqn72fv3t388MM3JCUlY7GYadSoKQMGvIZWxfFP/7V795/cuXOH7t17qR0lndFoZNas9zh37ixOTk5MnTqDYsWKP/Cab7/9ij//3JH+ODT0OgMHDqFPn5fZvXsX3377FSkpybzwQl1GjBhNUlIS06dPZdq0Weh01u+ltu1ir7FON7rJZEGv15IvnwvDh79A06bFKVcuv1WOJYQQmVGggC9LlixPf3z3biS9enWmefNWFCtWnLFjR1KmTFmWLl2Fg4MDFy6cY8yYEUydOp0aNWqxf/9e5s6dzUcfzado0WKkpqYwZcp4Fi/+kkGDXlfxk/3DYDCwdOl3fPbZIrWjPGDVqhU4O7uwbNlqjh8/yowZ77Bo0ZIHXtO//yD69x8EwOHDB1mw4BO6du3BrVs3mTPnfRYtWoKPT36GDx/Cvn17qFcvkFq1arNu3Rq6dOlu9c9g48U++38N7d9/izff3MSCBW2oVasgQ4bUzPZjCCFEVt29exdFUXB1deXYsSOEhYUxb97C9Ou9ZcuWp1+/AXz33WJq1KjF999/Q9++r1K0aNrdQ05OzowaNY7r1689tO+LF88ze/ZMUlNT8PT0YsqUady8eYNvvlmUXohnzHiH6tVrUr16TUaNegNv73w4OjoSFxfL229Ponz5CpjNZrp1C+abb5YSFnaHefM+JjU1BS8vb8aMmUDBgoUeOO7mzX9QrVp19Pq00vTllws4cuQQcXFxFChQgPfeex8fn/wEBbWgXLmKREXd5euvv+fHH5eyY8cWzGYLderU5fXXh6PRaB77/vvCw8MYO/athz7/559/havrP5O27du3m4EDhwDw/PM1iImJJiwsjICAgIfeazQamTNnFpMnv4eTkxO7du2kefOW+Pn5A/Dee+/j6Jh2otqiRWsGD36Fzp27WX18iG0X+2y8Zm8wmJk9ey/z5x+iSBEvGZgjhEjnua0bTrc2W2XfqYVaEdd8dYavu3s3klde6YPBkEpsbAzly1di5sw5+Pn5s3XrJsqXr/DQ363nn6/OwoWfAWkF/M03Rz+w3c/PP70I/du7707m9dffIDCwIb/8sppVq1ZQr17gY7OFhl7nk08W4OcXwMqVy9LzHD16iNKly+Du7sGsWUP54IO5BAQEcODAPj74YAaffvr5A/vZs2cXHTp0BuDmzRuEhl5j4cJv0Gq1TJs2hU2b/qB375eIiYnhxRf7pvdYnD9/lq+++h6NRsO0aVPYvPkPKlWq8tj33+fvH/BAb8mT2j5//gLpj/PnL0BkZPgji/3Gjb9RunRpKlWqDMCtWzfQ6x0YO3Yk4eHh1K/fIL0nxdPTE1dXFy5dukiZMmUzzJEVNl3ss2s0/rlzdwkJ+YNTpyJ56aXKvPdeExlpL4TIVe5341ssFj77bC7Xrl3lhRfq/H+rBrPZ/NB7jEYT9+u/RqNNP6N8kpiYGKKi7hIY2BCAzp27AXD06OHHvidfPh8KFiyIyWShRYvWDBnyKkOHvsmWLZto1aotN25c5/btm4wb989ZdGJi4kP7uXHjBr6+aT8+ChcuwrBhI9mwYS2hodc5ffokhQoVTn/t/WJ6+PBBzpw5xYABLwOQmpqCv38ArVu3e+L7IfNn9oqi/OeHlIJG8+hxDuvWrWHEiH9+VJnNZo4fP8b8+V/i6urC2LFv8ccfv9KuXTAA/v7PcfNmqBT7J8qmAXqbNl0hLCyB77/vSJs2pbJln0II+5GZM++cotVqCQl5k/79+/Djjz/w4ov9qFSpMqtXr8BkMqV3gQOcOnWC8uXTlgIvX74C586doUSJkunbQ0Ov8913i5k8+b305/R6/QOFLTU1lbt3Ix/qNTCZTOn/7uT0zwqk+fMXoEiRYhw7doTDhw/y1ltjuXEjlIIFC6WfRZvNZqKj7z302TQa0vOfO3eWd96ZSK9efWjatDk6nRZFUf51TGcALBYzPXr0plevtDP2+Ph4dDpdhu+HzJ/Z+/r6cffu3fQfC1FRURQo4PvQ6yIjI4iJiaZy5arpz/n45KdWrdrky5cPgEaNmnLmzOn0Yq/T6XJkgGTuGYL5LLJwZn/rVjz7998CYNiwWuza1U8KvRDCJuj1eoYOHcGSJYuJirpLtWrVKVGiFJ9++lF6ET537izff7+Yfv0GANCnT1++/fYrbtwIBdJG73/22Vz8/R/sinZ3d8fX14+DB/cDsGnT7yxe/CVeXt7cvn2L1NRU4uJi+fvvY4/N16ZNOz77bC41atTC2dmZYsWKExcXl/6e335bzzvvTHzofYULF+HOndsAHD9+hOrVa9KpUzeKFCnK3r27Hzkdb40aL7Bp0+8kJSVhMpkYP34UO3duy/T7M6NevUA2bvwNgL//Po6jo9Mju/BPnTpB1arPP/Bc/foNOXhwH/Hx8ZjNZvbv30v58uXTt4eF3aFQoSLPlOtp2PSZvaJ5tvg//3yWsWO3ky+fM/v29Uev11KgQO5ZLlcIITJSt259KleuwtdfL2Ts2EnMnDmbRYs+5+WXe6DT6fDw8GTy5GnUqFEr/fWDB4cwdep4zGYLZrOJpk1bpI8g/7cpU6YxZ877fP75PLy8vJk8+T0KFChAvXqBvPxyD557riDVqlV/bLZGjZry4Yfv8/rrbwDg6OjItGmz+PTTORgMBlxd3Zg06d2H3hcY2JBjxw5Tr14gzZu3YsKEMfTt2xOAcuUqpP8Q+LcGDRpx6dIFBg9+BYvFTJ069WnbNoi7dyMz9f7M6Nq1Jx9+OJOXXuqBo6NDek/IuXNn+PrrhcyZMw+A27dv4evr98B7K1WqTJ8+fQkJGYDJZOKFF+rQrl0HIK0XIiEhgdKlyzxTrqehUf7br2FDYq7+jdG9ZMYv/L/o6GTGjdvOL7+cp1at51iwoC0lSnhbL6CN8/X1IDIyXu0Ydk/a2fqepY3Dwq4TECDrXmRWdsyNn5qaSkjIQL788tsHLkfYq59++hGdTkfXrj0e2vbf759WqyF/fvdnPpaNd+NnPn54eAJNmvzAhg0XmTAhkPXre0qhF0KIXMTJyYm+fV9lzZpVakexuqSkJA4fPkjHjl1y5Hi2/dMpE7fH3R9F6efnRufO5ejSpTxVqz58q4kQQgj1NW7cVO0IOcLV1ZXZs+fm2PFs+sxeySD+33+H07r1cq5ciUaj0fDOO42l0AshhMhzbLrYP+7M3mSyMHfuAdq2/ZHw8ETu3k3O4WBCCHtgw0OahA2zxvfOxrvxH/6tcvVqDEOH/sHhw3fo3LkcH3zQHG9vZxXCCSFsmV7vSGJiHG5unjKjpsgxiqKQmBiHXp+9E7vZeLF/+D77xYuPcfHiPRYubEeXLuUf8SYhhMhYvny+REdHkpAQo3YUm6DVap/5PnbxIL3ekXz5Hp60Jyuseuvdhg0b+OKLLzCZTPTr148XX3zxge1nz55l4sSJJCYmUqtWLd59992nut0i+uZlTE5+REYmERWVRPnyBUhKMhIdnUKhQh7Z/XHyHLklLGdIO1uftLH1SRtbV6699S48PJy5c+eyfPly1q5dy8qVK7l06dIDrxkzZgxTpkxh06ZNKIrCTz/99JRH0bJx42UaN/6OIUN+//8KUA5S6IUQQoh/sVqx37t3L3Xr1sXb2xtXV1dat27Nxo0b07ffunWLlJQUnn/+eQC6dOnywPbMePeD4/Ttu46AAHcWLmwn19WEEEKIR7DaNfuIiAh8ff+55uDn58eJEyceu93X15fw8PCnOsbhY9G8+25jBg+ugYODbd9YkFtptfIDKidIO1uftLH1SRtbT1bb1mrF3mKxPHCm/d8lAjPanhm7d7+a9aDiibJyjUhknrSz9UkbW5+0ce5ltdPhgIAAIiMj0x9HRkbi5+f32O137959YLsQQgghsofVin39+vXZt28f9+7dIzk5mc2bN9OoUaP07YUKFcLJyYkjR44AsG7duge2CyGEECJ7WP3Wuy+//BKj0Ui3bt0YNGgQgwYNYvjw4VSpUoVz584xadIkEhISqFSpEu+//z6Ojtk7kYAQQgiR19n0ErdCCCGEyJgMYRdCCCHsnBR7IYQQws5JsRdCCCHsnBR7IYQQws5JsRdCCCHsXK4v9hs2bKBdu3a0atWKZcuWPbT97NmzdOnShdatWzNx4kRMJpMKKW1bRm28detWOnbsSIcOHQgJCSE2NlaFlLYtoza+b+fOnTRr1iwHk9mXjNr5ypUrvPzyy3To0IEBAwbId/kZZNTGp0+fpmvXrnTo0IHXXnuNuLg4FVLavoSEBIKCgrh58+ZD256p7im5WFhYmNK0aVMlOjpaSUxMVIKDg5WLFy8+8Jr27dsrx44dUxRFUcaPH68sW7ZMhaS2K6M2jo+PVwIDA5WwsDBFURTlk08+UaZNm6ZWXJuUme+xoihKZGSk0qZNG6Vp06YqpLR9GbWzxWJRWrVqpfz555+KoijKhx9+qMyePVutuDYpM9/l3r17Kzt37lQURVHef/995eOPP1Yjqk07fvy4EhQUpFSqVEm5cePGQ9ufpe7l6jP7nFg5L6/LqI2NRiNTp07F398fgHLlynHnzh214tqkjNr4vkmTJjFs2DAVEtqHjNr59OnTuLq6ps/UOWTIEF588UW14tqkzHyXLRYLiYmJACQnJ+Ps7KxGVJv2008/MXXq1EdOIf+sdS9XF/tHrZz375XxsmPlvLwuozbOly8fLVu2BCAlJYVFixbRokWLHM9pyzJqY4Dvv/+eihUrUq1atZyOZzcyaufQ0FAKFCjAhAkT6Ny5M1OnTsXV1VWNqDYrM9/lcePGMWnSJBo0aMDevXvp1atXTse0eTNmzKBWrVqP3PasdS9XF/ucWDkvr8tsG8bHxzN48GDKly9P586dczKizcuojS9cuMDmzZsJCQlRI57dyKidTSYTBw8epHfv3vzyyy8UKVKEWbNmqRHVZmXUxikpKUycOJElS5awe/du+vTpw9ixY9WIareete7l6mIvK+dZX0ZtDGm/JPv06UO5cuWYMWNGTke0eRm18caNG4mMjKRr164MHjw4vb3F08monX19fSlWrBhVqlQBICgoiBMnTuR4TluWURtfuHABJycnqlatCkDPnj05ePBgjue0Z89a93J1sZeV86wvozY2m80MGTKEtm3bMnHiROk5eQYZtfHw4cPZtGkT69atY9GiRfj5+bF8+XIVE9umjNq5evXq3Lt3j3PnzgGwfft2KlWqpFZcm5RRGxcrVoywsDCuXLkCwLZt29J/XIns8cx1L9uGD1rJ+vXrlfbt2yutWrVSFi1apCiKogwcOFA5ceKEoiiKcvbsWaVr165K69atlbfeektJTU1VM65NelIbb968WSlXrpzSoUOH9H8mTJigcmLbk9H3+L4bN27IaPwsyKidjx8/rnTt2lVp166d8uqrryp3795VM65NyqiNd+7cqQQHBytBQUFKv379lNDQUDXj2rSmTZumj8bPat2TVe+EEEIIO5eru/GFEEIIkXVS7IUQQgg7J8VeCCGEsHNS7IUQQgg7J8VeCCGEsHN6tQMIkVeUK1eOsmXLotX+8xu7cuXKT5yoaM2aNWzatIkvv/wyy8efP38+y5Ytw9/fH41Gg9lsJn/+/EydOpUSJUo89f7Cw8N58803WbFiBTdu3GD27NnMnz//geez6ubNm7Rs2ZKyZcumP5eUlERAQAAzZ86kSJEiT3z/Z599Rvny5WWKZ5HnSbEXIgd99913+Pj4qHb8du3aMWXKlPTHP/zwA6NGjWLNmjVPvS9/f//0gn779m2uXr360PPZwdnZmXXr1qU/VhSF6dOnM3fuXD7++OMnvvfAgQOULl0627IIYaukG1+IXGD16tV0796dTp060bRp00fOoLd582Y6d+5Mly5d6N69O4cOHQLS1i0YN24cXbp0ITg4mJkzZ2ZufWugXr166UU6LCyMIUOGEBwcTFBQEF9//TWQNqf81KlTCQ4OpkuXLgwfPpzExERu3rxJ9erVMZvNTJo0idDQUAYMGPDA840bN+bUqVPpxxsxYkT6Z/viiy/o3LkzHTt2JCQkJNOLWKWmphIREYGXlxcAV69epX///vTo0YOmTZvy+uuvk5qayrJlyzh16hSzZ89my5YtGAwGZs6cSefOnenQoQPjxo0jISEhU8cUwtZJsRciB/Xr14+OHTum/xMVFUViYiKrVq1i0aJFrF27lrlz5/Lhhx8+9N7Zs2czdepU1qxZw5tvvsmBAwcAmDlzJpUqVWLNmjWsXbuW6Ohovv322wyzmEwmVq9eTZ06dQAYPXo0derUYcOGDfz444+sX7+e3377jePHj3Pw4EHWr1/PmjVrKFKkCOfPn0/fj06nY/r06RQtWpTFixc/8HzXrl3Tew1iY2PZt28fwcHBrF27lgsXLrBq1SrWrVtH48aNmTRp0iNzpqSk0LFjR4KDg6lfvz6dO3emZMmSjB49GkhbDrRTp0789NNPbN68mZs3b7Jz505efPFFKleuzNtvv03Lli1ZtGgROp2ONWvWsH79evz8/JgzZ04m/8sJYdukG1+IHPS4bvyFCxfy559/cu3aNc6dO0dSUtJDr2nfvj3Dhg2jcePGBAYGMmjQIAB27tzJyZMnWb16NZBWHB/n999/T59T22g0UqlSJaZNm0ZSUhJHjx7lm2++AcDDw4MuXbqwa9cuJk6ciE6no3v37jRo0IDWrVtTtWpVbt68meHn7dq1K926dWPcuHH8+uuvNGvWDA8PD3bs2MHJkyfp2rUrkLaSV3Jy8iP38e9u/L/++osxY8bQtGlT3NzcABgzZgx79uzhq6++4tq1a0RERDyy/Xbu3El8fDx79+5N//z58+fP8DMIYQ+k2AuhsrCwMHr27EmPHj2oWbMmbdq0YceOHQ+9buTIkXTt2pU9e/awZs0avvnmG1avXo3FYuHTTz+lVKlSAMTFxT12waL/XrO/LyEhgf/OnG2xWDCZTHh6erJu3TqOHj3K/v37GTFiBAMGDKBx48YZfrZChQpRsWJFdu7cyZo1a5gwYUL6vgcOHJi+up/BYCA2NjbD/TVs2JD+/fvz5ptv8ttvv+Hu7s5bb72F2Wymbdu2NGnShDt37jz0We4fc8KECem5ExMTSU1NzfCYQtgD6cYXQmWnTp3Cx8eHkJAQGjRokF7ozWZz+mtMJhPNmjUjOTmZ3r17M3XqVM6fP4/BYKBBgwYsWbIERVEwGAy8/vrrLF269KkyuLu7U61aNZYtWwakjQNYu3Yt9evXZ8eOHbzyyitUr16dN954g06dOj1wHR7SuuyNRuMj992jRw+++uorkpOTqVmzJgANGjRg9erV6dfMP/30U95+++1MZX311Vdxc3Nj3rx5AOzevZuhQ4fSrl07AP7+++/0ttPpdOnjFxo0aMCyZcswGAxYLBYmT56c4QA/IeyFnNkLobLAwEBWr15NmzZt0Gg01K5dGx8fH65fv57+Gr1ez4QJExg9ejR6vR6NRsPMmTNxdHRk4sSJzJgxg+DgYIxGI/Xr12fgwIFPnWPOnDm89957rFmzBoPBkD4gz2KxsGvXLoKCgnB1dcXLy4tp06Y98N7SpUvj5OREt27dmDt37gPbmjVrxrvvvpt+2QGge/fuhIeH06NHDzQaDc899xyzZs3KVE4HBwcmT57MwIED6datGyNHjmTo0KG4urri7u7OCy+8QGhoaPqxP/74Y4xGIyEhIXzwwQd07twZs9lMhQoVGDdu3FO3kxC2SFa9E0IIIeycdOMLIYQQdk6KvRBCCGHnpNgLIYQQdk6KvRBCCGHnpNgLIYQQdk6KvRBCCGHnpNgLIYQQdk6KvRBCCGHn/gdZBtQQNVNmRQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score, roc_curve, auc\n",
    "y_score = rf.predict_proba(X_test)\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_score[:,1], pos_label=1)\n",
    "area = auc(fpr, tpr)\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_theme()\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "lw = 2\n",
    "plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=lw, label='ROC curve (area = %0.2f)' % area)\n",
    "plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC score RandomForest with glove features')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('ROC_RandomForest_glove.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1bf1649",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "42360a14",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/manelmahroug/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=42, solver=&#x27;sag&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=42, solver=&#x27;sag&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(random_state=42, solver='sag')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#For small datasets, ‘liblinear’ is a good choice, whereas ‘sag’ and ‘saga’ are faster for large ones;\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "clf= LogisticRegression(solver=\"sag\",random_state=42)\n",
    "clf.fit(X_train,np.array(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3a2d3341",
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_preds=clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2f9a9fbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "f1 = f1_score(y_test,clf_preds)\n",
    "clf_acc= accuracy_score(y_test, clf_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f66a7636",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5945635232083836 0.5456381160030723\n"
     ]
    }
   ],
   "source": [
    "print(f1,clf_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3babb1e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuned hpyerparameters :(best parameters)  {'C': 0.1, 'penalty': 'l2'}\n",
      "accuracy : 0.5487850114976853\n"
     ]
    }
   ],
   "source": [
    "# Grid search cross validation\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "grid={\"C\":np.logspace(-3,3,7), \"penalty\":[\"l1\",\"l2\"]}# l1 lasso l2 ridge\n",
    "logreg=LogisticRegression()\n",
    "logreg_cv=GridSearchCV(logreg,grid,cv=10)\n",
    "logreg_cv.fit(X_train,y_train)\n",
    "\n",
    "print(\"tuned hpyerparameters :(best parameters) \",logreg_cv.best_params_)\n",
    "print(\"accuracy :\",logreg_cv.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16e7a1f5",
   "metadata": {},
   "source": [
    "# XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "39d913ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0feb213b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, colsample_bylevel=1,\n",
       "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "              importance_type=&#x27;gain&#x27;, interaction_constraints=&#x27;&#x27;,\n",
       "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=&#x27;()&#x27;,\n",
       "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "              tree_method=&#x27;exact&#x27;, validate_parameters=1, verbosity=None)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, colsample_bylevel=1,\n",
       "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "              importance_type=&#x27;gain&#x27;, interaction_constraints=&#x27;&#x27;,\n",
       "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=&#x27;()&#x27;,\n",
       "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "              tree_method=&#x27;exact&#x27;, validate_parameters=1, verbosity=None)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "              importance_type='gain', interaction_constraints='',\n",
       "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "              tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# instantiate and fit the model\n",
    "xgb_cl = xgb.XGBClassifier()\n",
    "xgb_cl.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6133aa5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score: 0.6304972622085677\n",
      "F1 score: 0.6669421026185025\n"
     ]
    }
   ],
   "source": [
    "# get accuracy and f1 score\n",
    "preds = xgb_cl.predict(X_test)\n",
    "print(\"Accuracy score: \" + str(accuracy_score(y_test, preds)))\n",
    "print(\"F1 score: \"+ str( f1_score(y_test,preds)))\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a23f1bf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
